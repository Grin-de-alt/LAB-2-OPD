import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text


# Включаем логирование, чтобы не пропустить важные сообщения
logging.basicConfig(level=logging.INFO)
# Объект бота
bot = Bot(token="5768772566:AAFwovlobfH9I79-dpoV4OizxdA12_s-yMs")
# Диспетчер
dp = Dispatcher()

# Хэндлер на команду /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello, i'm your personal FAQ-bot!")
    await message.answer("Write '/FAQ' to get started.")
@dp.message(Command("FAQ"))
async def cmd_start(message: types.Message):
    await message.answer("Here the list of most popular questions,\n""Write number one of them to get the answer.")
    await message.answer("1.Когда выдаются студенческие билеты?\n""2.Когда выдаются зачетные книжки?\n""3.Как и когда оформляется банковская карточка?\n""4.Как и когда в библиотеке выдаются учебники?\n""5.Как получить справку о том, что «я здесь учусь»?\n""6.Как получить справку для военкомата о предоставлении отсрочки от службы в армии?\n""7.Как проходит сессия?\n""8.Какие формы проверки знаний студентов возможны? \n""9.Как узнать вид промужуточной аттестации по предмету и перечень мероприятий промежуточной аттестации, которые предстоит сдавать в будущую сессию? \n""10.Какой студент считается неуспевающим?\n""11.При каких условиях студенты допускаются к сдаче экзаменов? Может ли студент, не сдавший зачеты, быть допущен к экзамену?\n""12.Какие документы студент обязан иметь при себе на экзамене?\n""13.Каковы правила пересдачи экзамена с оценкой 'неудовлетворительно'?\n""14.При наличии какого количества задолженностей студент представляется к отчислению за академическую неуспеваемость?\n""15.Правда ли, что посещение занятий в вузе не является обязательным? \n""16.Каковы права и обязанности старосты группы? \n""17.Как поступить при утере документов (студенческий билет, зачетная книжка)?\n")
@dp.message(Text("1"))
async def with_puree(message: types.Message):
    await message.reply("Студенческие билеты обычно получают на организационном собрании перед началом учебного года. Эти собрания проводятся по факультетам 1 сентября. Если по какой-либо причине вы не получили студенческий билет 1-го сентября, его можно получить в вашем деканате в другой день. Студенческий билет должен находиться у вас на руках постоянно. Обращаем ваше внимание на то, что охрана не обязана помнить каждого студента в лицо, поэтому не стоит протестовать, когда вас просят предъявить студенческий билет при входе в любое из зданий университета. На последующих курсах Вы сдаете его на перерегистрацию в деканат через старосту группы в первые две недели осеннего семестра. Студенческий билет выдается бесплатно, но если вы его потеряете, то за дубликат студенческого билета придется заплатить.")

@dp.message(lambda message: message.text == "2")
async def without_puree(message: types.Message):
    await message.reply("Зачетные книжки обычно получают на организационном собрании перед началом учебного года. По зачеткам сверяются полученные оценки и отмечаются сданные зачеты и экзамены. Вы сдаете их на перерегистрацию в деканат через старосту группы в первые две недели каждого семестра или в течение двух недель после установленного приказом ректора срока продления сессии. В целом, практика показывает, что зачетные книжки часто иногда теряются. Восстанавливать зачетку – это обходить всех преподавателей, которые когда-либо ставили вам оценки, поэтому будьте аккуратнее с этим документом. Как и студенческий билет, зачетная книжка выдается бесплатно, но если вы ее потеряете, то за дубликат зачетной книжки придется заплатить.")
@dp.message(Text("3"))
async def with_puree(message: types.Message):
    await message.reply("Карточка оформляется в банке студентам, которым производится выплата академических и социальных стипендий, установленных государством пособий. Банк передает оформленные карточки в бухгалтерию университета, которая выделяет для каждой группы свой день выдачи банковских карт. Деканат  располагает информацией относительно графика таких выдач.")

@dp.message(lambda message: message.text == "4")
async def without_puree(message: types.Message):
    await message.reply("Получение учебников – мероприятие, которое традиционно проводится в начале сентября по графику, который доведет до вас деканат. I и II курсам выдают «набор учебников» по основным дисциплинам, поэтому берите с собой прочные сумки. Студентам с III курса и далее придется приходить уже в «свой» день».")
@dp.message(Text("5"))
async def with_puree(message: types.Message):
    await message.reply("Справки «о том, что я здесь учусь» студенты заказывают в деканате. Они называются «учебные справки» и часто требуются в различных организациях: от места работы ваших родителей до военкомата. Заранее выясните, какая нужна печать: гербовая или деканата. Если вам нужна гербовая печать, еще какая-то дополнительная информация, – постарайтесь сообщить об этом в деканат, когда заказываете справку, а не когда вы ее получаете! Печать деканата ставится на подпись декана или его заместителя. Гербовая – только на подпись проректора или ректора.")

@dp.message(lambda message: message.text == "6")
async def without_puree(message: types.Message):
    await message.reply("Справки для военкомата студенты могут заказать и получить в военно-учетном столе университета. Он находится в 8 корпусе университета. Но вообще-то справки в военкоматы о предоставлении отсрочки от службы в армии представляются университетом централизованно после того, как вы встали на учет в том же военно-учетном столе.")
@dp.message(Text("7"))
async def with_puree(message: types.Message):
    await message.reply("Расписание сессии составляет учебный отдел университета. Вывешивается оно на доске объявлений деканата за 10 дней до календарного срока начала сессии. Дату экзаменов менять нельзя. Переносить экзамен нельзя. Минимальное количество дней между экзаменами – 3. Сессии проходят согласно графику учебного процесса, вывешенному на стенде деканата, либо находящемуся в деканате.")

@dp.message(lambda message: message.text == "8")
async def without_puree(message: types.Message):
    await message.reply("Оценки на экзаменах: «отлично», «хорошо», «удовлетворительно», «неудовлетворительно»;  для зачётной дисциплины: «зачтено», «не зачтено». Зачет выставляется по результатам учебной работы студента или итогового собеседования на последнем занятии. Промежуточная форма контроля знаний в течение семестра: ноябрь, апрель (так называемая «аттестационная неделя»). Формы проведения проверки определяются деканатами. Итоги фиксируются преподавателем в ведомости («аттестован», «не аттестован»).")
@dp.message(Text("9"))
async def with_puree(message: types.Message):
    await message.reply("На стенде расписания у декана или в деканате.")

@dp.message(lambda message: message.text == "10")
async def without_puree(message: types.Message):
    await message.reply("Не сдавший к окончанию сессии хотя бы один экзамен или зачет, установленный для данной сессии учебным планом.")
@dp.message(Text("11"))
async def with_puree(message: types.Message):
    await message.reply("К сдаче экзаменов допускаются все студенты, сдавшие зачеты по дисциплинам данного семестра. При наличии уважительных причин в виде исключения декан/заместитель декана имеют право допускать к экзаменационной сессии студентов, не сдавших зачеты по дисциплинам, на основании личных заявлений.")

@dp.message(lambda message: message.text == "12")
async def without_puree(message: types.Message):
    await message.reply("Зачетную книжку. Неудовлетворительная оценка проставляется только в экзаменационную ведомость. Неявка на экзамен отмечается в ведомости словами 'не явился'. Неявка без уважительной причины приравнивается к неудовлетворительной оценке. Зачетную книжку необходимо сдать в деканат по завершении сессии.")
@dp.message(Text("13"))
async def with_puree(message: types.Message):
    await message.reply("Пересдача в период экзаменационной сессии не допускается. Студентам, имеющим в сессию менее трех задолженностей (неудовлетворительных оценок) деканатом устанавливаются сроки ликвидации академической задолженности (не позднее двух недель с начала следующего за сессией семестра). Студенту, дважды получившему неудовлетворительную оценку или незачет по предмету (с учетом сдачи в сессию), может быть предоставлена возможность пересдать задолженность комиссии.")

@dp.message(lambda message: message.text == "14")
async def without_puree(message: types.Message):
    await message.reply("При наличии трех несданных экзаменов в период сессии. Если вы получили неудовлетворительную оценку, сдавая экзамен комиссии. Не ликвидировавшие в установленные сроки академическую задолженность (это может быть даже одна задолженность). Студент не может быть отчислен во время болезни, каникул, академического отпуска.")
@dp.message(Text("15"))
async def with_puree(message: types.Message):
    await message.reply("Статья 16 'Закона РФ о вузовском и послевузовском образовании' гласит, что студент обязан овладевать теоретическими знаниями и практическими навыками по избранной специальности; посещать обязательные учебные занятия; выполнять в установленном порядке все виды заданий, установленные учебным планом. Пропуск без уважительной причины свыше 36 часов учебных занятий, как правило, может быть основанием для представления студента к отчислению за пропуск занятий без уважительной причины.")

@dp.message(lambda message: message.text == "16")
async def without_puree(message: types.Message):
    await message.reply("Оказывать содействие деканату факультета и кафедрам по организации учебного процесса. Обеспечивать преподавателей списками группы и текущей информацией (об изменении числа студентов и т.д.). Оказывать содействие преподавателям в организации и проведении семинарских занятий, зачетов и экзаменов; обеспечении студентов учебно-методическими материалами. Ведение контроля за посещаемостью учебных занятий студентами группы. Заполнение журнала посещений; своевременно (не реже 1 раза в 2 недели) предоставляет информацию по посещаемости студентами группы (сдает журнал в деканат). Своевременное информирование студентов-задолжников о графике пересдач. Обеспечивать заполнение студентами необходимых документов (заявления, формы страхования и т.д.). Уведомлять деканат о неявке студентов на занятия по уважительной причине. Наблюдать за сохранностью учебного оборудования. Старосты 2–4 курсов обеспечивают связь с выпускающими кафедрами для решения вопросов, связанных со специализацией (своевременное написание заявлений с указанием желаемой темы курсовой или дипломной работы, организация кафедральных мероприятий и т.д.)")

@dp.message(Text("17"))
async def with_puree(message: types.Message):
    await message.reply("Следует обратиться в деканат факультета и написать заявление по установленной форме.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())